kind: Template
apiVersion: v1
metadata:
  name: user-manager
  annotations:
    tags: user-manager
labels:
  template: user-manager
  app: user-manager
objects:
  - kind: ImageStream
    apiVersion: v1
    metadata:
      name: ${APP_NAME}-app
      labels:
        app: ${APP_NAME}
    status:
      dockerImageRepository: ''
  - kind: ImageStream
    apiVersion: v1
    metadata:
      name: ${APP_NAME}-api
      labels:
        app: ${APP_NAME}
    status:
      dockerImageRepository: ''
  - kind: BuildConfig
    apiVersion: v1
    metadata:
      creationTimestamp: null
      name: ${APP_NAME}-app
      labels:
        app: ${APP_NAME}
        prefix: 'app'
    spec:
      failedBuildsHistoryLimit: 5
      nodeSelector: null
      output:
        to:
          kind: ImageStreamTag
          name: ${APP_NAME}-app:${TAG}
      source:
        contextDir: src/user-manager
        git:
          uri: ${GIT_URL}
        sourceSecret:
          name: ${GIT_SSH}
        type: Git
      strategy:
        dockerStrategy:
          from:
            kind: ImageStreamTag
            name: nginx:alpine
            namespace: openshift
        type: Docker
      successfulBuildsHistoryLimit: 5
      triggers:
      - imageChange: {}
        type: ImageChange
      - type: ConfigChange
  - kind: BuildConfig
    apiVersion: v1
    metadata:
      name: ${APP_NAME}-api
      labels:
        app: ${APP_NAME}
        prefix: 'api'
    spec:
      source:
        type: Git
        git:
          uri: ${GIT_URL}
          ref: ${BRANCH}
        contextDir: ${DIRECTORY}/user
        sourceSecret:
          name: ${GIT_SSH}
      triggers: []
      strategy:
        type: Source
        sourceStrategy:
          forcePull: true
          from:
            kind: DockerImage
            name: '${NODEJS_S2I}'
      output:
        to:
          kind: ImageStreamTag
          name: '${APP_NAME}-api:${TAG}'
  - kind: DeploymentConfig
    apiVersion: v1
    metadata:
      name: ${APP_NAME}-api
    spec:
      replicas: 1
      template:
        metadata:
          labels:
            name: ${APP_NAME}
        spec:
          initContainers:
            - name: init-mysql 
              image: busybox
              command: ['sh', '-c', 'until nc -z -v -w30 mysql 3306; do echo Waiting for mysql Database availability.; sleep 1; done;']
          containers:
            - name: ${APP_NAME}-api
              image: ''
              command:
                - sh
                - '-c'
                - npm run migrations && npm run seeds && npm start
              env:
                - name: MYSQL_USER
                  valueFrom:
                    secretKeyRef:
                      key: database-user
                      name: "${DATABASE_SERVICE_NAME}"
                - name: MYSQL_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: database-password
                      name: "${DATABASE_SERVICE_NAME}"
                - name: MYSQL_ROOT_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: database-root-password
                      name: "${DATABASE_SERVICE_NAME}"
                - name: MYSQL_DATABASE
                  valueFrom:
                    secretKeyRef:
                      key: database-name
                      name: "${DATABASE_SERVICE_NAME}"
                - name: MYSQL_HOST
                  value: mysql
      triggers:
        - type: ImageChange
          imageChangeParams:
            automatic: false
            from:
              kind: ImageStreamTag
              name: '${APP_NAME}-api:${TAG}'
              namespace: ${NAMESPACE}
            containerNames:
              - user-manager-api
        - type: ConfigChange
      strategy:
        type: Rolling
  - kind: DeploymentConfig
    apiVersion: v1
    metadata:
      name: ${APP_NAME}-app
    spec:
      replicas: 1
      template:
        metadata:
          labels:
            name: ${APP_NAME}
        spec:
          containers:
            - name: ${APP_NAME}-app
              image: ''
              env:
                - name: REACT_APP_API_URI
                  value: ${APP_NAME}-api
      triggers:
        - type: ImageChange
          imageChangeParams:
            automatic: false
            from:
              kind: ImageStreamTag
              name: '${APP_NAME}-app:${TAG}'
              namespace: ${NAMESPACE}
            containerNames:
              - user-manager-app
        - type: ConfigChange
      strategy:
        type: Rolling
  - kind: Service
    apiVersion: v1
    metadata:
      labels:
        app: ${APP_NAME}
      name: ${APP_NAME}-app
    spec:
      ports:
        - name: default
          port: 80
          protocol: TCP
          targetPort: 8080
      selector:
        deploymentconfig: ${APP_NAME}-app
  - kind: Route
    apiVersion: v1
    metadata:
      creationTimestamp: null
      labels:
        app: ${APP_NAME}
        template: ${APP_NAME}
      name: ${APP_NAME}-app
    spec:
      host: ${APP_NAME}-app-user-manager-dev.192.168.99.105.nip.io
      port:
        targetPort: default
      to:
        kind: Service
        name: user-manager-app
        weight: 100
      wildcardPolicy: None
  - kind: Service
    apiVersion: v1
    metadata:
      labels:
        app: ${APP_NAME}
      name: ${APP_NAME}-api
    spec:
      ports:
        - name: default
          port: 80
          protocol: TCP
          targetPort: 30030
      selector:
        deploymentconfig: ${APP_NAME}-api
parameters:
  - name: NAMESPACE
    value: user-manager-dev
  - name: APP_NAME
    value: user-manager
  - name: NODEJS_S2I
    value: bucharestgold/centos7-s2i-nodejs
  - name: GIT_URL
    value: git@github.com:valdestron/demo-nodejs-app-on-openshift.git
  - name: BRANCH
    value: master
  - name: GIT_SSH
    value: git
  - name: SOURCE_DIRECTORY
    value: 'src/user-manager'
  - name: TAG
    value: '0.0.0'
  - name: DIRECTORY
    value: src
  - name: DATABASE_SERVICE_NAME
    value: mysql
